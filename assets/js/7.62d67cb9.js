(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{193:function(e,t,r){e.exports=r.p+"assets/img/streetlight-anti-method.fb38c4e3.png"},194:function(e,t,r){e.exports=r.p+"assets/img/off-cpu-analysis.2dfa0755.png"},195:function(e,t,r){e.exports=r.p+"assets/img/flame-graph.a64175c5.png"},214:function(e,t,r){"use strict";r.r(t);var a=r(1),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v('Gregg 先生が 2015 年の Velocity Conference で公演した "Linux Performance Tools, Brendan Gregg" を YouTube で見つけたので、今日ははじめのトラブルシューティングの方法論についてまとめました。')]),e._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#公演について"}},[e._v("公演について")])]),a("li",[a("a",{attrs:{href:"#アンチパターン"}},[e._v("アンチパターン")]),a("ul",[a("li",[a("a",{attrs:{href:"#street-light-anti-method"}},[e._v("Street Light Anti-Method")])]),a("li",[a("a",{attrs:{href:"#drunk-man-anti-method"}},[e._v("Drunk Man Anti-Method")])]),a("li",[a("a",{attrs:{href:"#blame-someone-else-anti-method"}},[e._v("Blame Someone Else Anti-Method")])])])]),a("li",[a("a",{attrs:{href:"#方法論-methodorogies"}},[e._v("方法論 (methodorogies)")]),a("ul",[a("li",[a("a",{attrs:{href:"#problem-statement-method"}},[e._v("Problem Statement Method")])]),a("li",[a("a",{attrs:{href:"#workload-characterizaton-method"}},[e._v("Workload Characterizaton Method")])]),a("li",[a("a",{attrs:{href:"#use-method"}},[e._v("USE Method")])]),a("li",[a("a",{attrs:{href:"#off-cpu-analysis"}},[e._v("Off-CPU Analysis")])]),a("li",[a("a",{attrs:{href:"#cpu-profile-method"}},[e._v("CPU Profile Method")])]),a("li",[a("a",{attrs:{href:"#rtfm-method"}},[e._v("RTFM Method")])])])]),a("li",[a("a",{attrs:{href:"#参考文献"}},[e._v("参考文献")])])])]),a("p"),e._v(" "),a("h2",{attrs:{id:"公演について"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公演について"}},[e._v("#")]),e._v(" 公演について")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=FJW8nGV4jxY",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux Performance Tools, Brendan Gregg, part 1 of 2 - YouTube"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=zrr2nUln9Kk",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux Performance Tools, Brendan Gregg, part 2 of 2 - YouTube"),a("OutboundLink")],1)])]),e._v(" "),a("blockquote",[a("p",[e._v("Tutorial by Brendan Gregg of Netflix for O'Reilly Velocity conference 2015 Santa Clara.")])]),e._v(" "),a("p",[e._v("スライドは次のページから見れます。")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.slideshare.net/brendangregg/velocity-2015-linux-perf-tools",target:"_blank",rel:"noopener noreferrer"}},[e._v("Velocity 2015 linux perf tools"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"アンチパターン"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#アンチパターン"}},[e._v("#")]),e._v(" アンチパターン")]),e._v(" "),a("p",[e._v("まずはじめにトラブルシューティングのアンチパターンを紹介していました。")]),e._v(" "),a("h3",{attrs:{id:"street-light-anti-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#street-light-anti-method"}},[e._v("#")]),e._v(" Street Light Anti-Method")]),e._v(" "),a("p",[a("img",{attrs:{src:r(193),alt:""}})]),e._v(" "),a("ul",[a("li",[e._v("財布を落とした場所のうち、探しやすい電灯付近しか探さない男の風刺画")]),e._v(" "),a("li",[e._v("パフォーマンスが悪化した時、多くの人は状況を診断するための観測ツール (observability tools) を使うが、使いやすいものやインターネットでたまたま見かけたものしか使わない")]),e._v(" "),a("li",[e._v("スコーピングを意識しない診断では真の原因はわからないことが多い")])]),e._v(" "),a("h3",{attrs:{id:"drunk-man-anti-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drunk-man-anti-method"}},[e._v("#")]),e._v(" Drunk Man Anti-Method")]),e._v(" "),a("ul",[a("li",[e._v("手当り次第調整できるパラメータをランダムに変更していって、治るまで続ける方法")]),e._v(" "),a("li",[e._v("自分の考える Cons\n"),a("ul",[a("li",[e._v("治った理由を説明できない")]),e._v(" "),a("li",[e._v("もっと問題を悪くするリスクがある")]),e._v(" "),a("li",[e._v("次のトラブルシューティングに活かすことが出来ない")])])])]),e._v(" "),a("h3",{attrs:{id:"blame-someone-else-anti-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blame-someone-else-anti-method"}},[e._v("#")]),e._v(" Blame Someone Else Anti-Method")]),e._v(" "),a("p",[e._v("よくあるたらい回しの手続き")]),e._v(" "),a("ol",[a("li",[e._v("自分が責任をおっていないコンポーネントをひとつ見つける")]),e._v(" "),a("li",[e._v("そのコンポーネントが原因であると仮説をたてる")]),e._v(" "),a("li",[e._v("コンポーネントを担当するチームに調査依頼する")]),e._v(" "),a("li",[e._v("もし仮説が間違っていたら手順 1 に戻る")])]),e._v(" "),a("h2",{attrs:{id:"方法論-methodorogies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法論-methodorogies"}},[e._v("#")]),e._v(" 方法論 (methodorogies)")]),e._v(" "),a("p",[e._v("方法論を説明する前に、Gregg 先生は "),a("code",[e._v("./lab002")]),e._v(" の名前のユーザー プログラムを実行して、聴衆にトラシューするよう促していました。"),a("code",[e._v("vmstat")]),e._v(" や "),a("code",[e._v("top")]),e._v(" などの様々な実行結果を見てみたいという意見がありましたが、結局おかしなところは見つからず、最後に面白い結末でデモは終了します。実は "),a("code",[e._v("./lab002")]),e._v(" は何も実行していなかったのです。")]),e._v(" "),a("p",[e._v("この例は方法論の重要性を如実に表しています。つまり、やみくみに実行するトラブル シューティングが役に立たないということです。")]),e._v(" "),a("p",[e._v("自分にとってもこれは非常に面白いデモだったので印象に残っています。以下では、発表で紹介があったいくつかの方法論をまとめますが、Gregg 先生の本をみると他にも様々な方法論を体系立てているようなので、そちらも時間があるときに見てみたいですね。")]),e._v(" "),a("h3",{attrs:{id:"problem-statement-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#problem-statement-method"}},[e._v("#")]),e._v(" Problem Statement Method")]),e._v(" "),a("p",[e._v("これは問題のスタートポイントを定めるための方法論。Gregg がサン・マイクロシステムズのサポートをしていた間、チケット起票時に必ず確認していた事項らしい。")]),e._v(" "),a("ol",[a("li",[e._v("パフォーマンス問題が発生していると"),a("strong",[e._v("考えた")]),e._v("きっかけとなったものは何か?")]),e._v(" "),a("li",[a("strong",[e._v("これまで")]),e._v("問題なくシステムが動いていた実績があるか?")]),e._v(" "),a("li",[e._v("最近何か"),a("strong",[e._v("変わった")]),e._v("ものはないか? (e.g. ソフトウェア、ハードウェア、負荷)")]),e._v(" "),a("li",[e._v("パフォーマンス問題は"),a("strong",[e._v("レイテンシ")]),e._v("や実行時間の観点で表現できるか?")]),e._v(" "),a("li",[e._v("その問題は"),a("strong",[e._v("他の")]),e._v("人やアプリケーションに影響を与えているか?")]),e._v(" "),a("li",[a("strong",[e._v("環境")]),e._v("は何か? (e.g. ソフトウェア、ハードウェア、インスタンスタイプ、バージョン、構成情報)")])]),e._v(" "),a("h3",{attrs:{id:"workload-characterizaton-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workload-characterizaton-method"}},[e._v("#")]),e._v(" Workload Characterizaton Method")]),e._v(" "),a("p",[e._v("ワークロードを定量化して把握するため、4 つの情報を収集する方法論。これで大体の問題は解決するらしい。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Who")]),e._v(": 誰が負荷を与えているか (e.g. PID, UDI, IP Address)")]),e._v(" "),a("li",[a("strong",[e._v("Why")]),e._v(": なぜ負荷を与える処理が実行されているか (e.g. code path, stack trace)")]),e._v(" "),a("li",[a("strong",[e._v("What")]),e._v(": 負荷は何か (e.g. IPOS, tput, type, r/w)")]),e._v(" "),a("li",[a("strong",[e._v("How")]),e._v(": 時間が経過すると負荷はどうなっていくか")])]),e._v(" "),a("h3",{attrs:{id:"use-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-method"}},[e._v("#")]),e._v(" USE Method")]),e._v(" "),a("p",[e._v("各リソース (CPU, ディスク、メモリ、etc) で 3 つのメトリックをチェックすれば答えが導かれるという方法論。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Utilizaton")]),e._v(": リソースがサービスを提供するのに平均してどれくらい時間がかかったか")]),e._v(" "),a("li",[a("strong",[e._v("Saturation")]),e._v(": 提供できない余剰のタスクがリソースにどれくらいあったか (典型的にはキューの長さ)")]),e._v(" "),a("li",[a("strong",[e._v("Errors")]),e._v(": エラーイベントの数")])]),e._v(" "),a("p",[e._v("逆に言えば、これら以外のメトリックは見なくても良いという安心感をあたえる。これについて、Gregg 氏は「暗黙的な未知 (unknown-unknowns) が 明示的な未知 (known-unknwons) となる」という表現をしている。")]),e._v(" "),a("p",[e._v("例えば、ネットワークのコンポーネント (NIC) で USE Method を適用すると、以下のようになる。")]),e._v(" "),a("ul",[a("li",[e._v("U: 送信/受信におけるパケットのバイト数")]),e._v(" "),a("li",[e._v("S: 送信/受信におけるペンディング パケット数")]),e._v(" "),a("li",[e._v("E: ポリシー以外の理由でドロップされたパケット数")])]),e._v(" "),a("p",[e._v("Kubernetes で実際に USE Method を適用してみたという記事があるので、参考になると思う。また、本家の USE Method の解説には推奨される解釈方法などの詳細が記載されている。")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.freshtracks.io/a-deep-dive-into-kubernetes-metrics-part-2-c869581e9f29",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Deep Dive into Kubernetes Metrics — Part 2 - FreshTracks.io"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.brendangregg.com/usemethod.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("The USE Method"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"off-cpu-analysis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#off-cpu-analysis"}},[e._v("#")]),e._v(" Off-CPU Analysis")]),e._v(" "),a("p",[a("img",{attrs:{src:r(194),alt:""}})]),e._v(" "),a("p",[e._v("USE Method を使えば、沢山のデバイスレベルの問題 (e.g. ネットワーク インターフェイスがビジー状態) を容易に発見できるが、一方でロック競合のような複雑に条件が絡みあっている問題を発見することは出来ない。この時役立つのが Off-CPU Analysis。")]),e._v(" "),a("p",[e._v("Off-CPU Anaysis の観点では、パフォーマンス問題は以下の 2 種類に大別できる。")]),e._v(" "),a("ul",[a("li",[e._v("On-CPU: スレッドが CPU 上で実行されている時の問題")]),e._v(" "),a("li",[e._v("Off-CPU: I/O、ロック、タイマ、ページング (スワッピング) のような待ちが発生している時の問題。簡単に言えば "),a("code",[e._v("time")]),e._v(" コマンドの "),a("code",[e._v("{real} - ({user} + {sys})")]),e._v(" が長い時の話。")])]),e._v(" "),a("p",[e._v("Off-CPU Analysis は Off-CPU のパフォーマンス問題を分析する方法論で、実行状態から外れた I/O 待ち、Block、Idle 状態のスレッドを調査する為に用いられる。")]),e._v(" "),a("p",[e._v("Linux だと eBPF 等のトレーサーで調査が出来るらしいが詳細はわからない。本人の公式ページを見るのが良い。")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.brendangregg.com/offcpuanalysis.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Off-CPU Analysis"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"cpu-profile-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-profile-method"}},[e._v("#")]),e._v(" CPU Profile Method")]),e._v(" "),a("p",[a("img",{attrs:{src:r(195),alt:""}})]),e._v(" "),a("ul",[a("li",[e._v("プロファイラで CPU profile を取得する")]),e._v(" "),a("li",[e._v("実行時間が全体のうち 1 %以上のすべてのソフトウェアを理解するのがよい (が、難しい・・・)")])]),e._v(" "),a("p",[e._v("Flame Graph と呼ばれる CPU プロファイルを可視化するツールを使って効率的に分析できる。")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.brendangregg.com/flamegraphs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flame Graphs"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://qiita.com/saikoro-steak/items/bf066241eeef1141ef5f",target:"_blank",rel:"noopener noreferrer"}},[e._v("perf使ってみた - Qiita"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://yohei-a.hatenablog.jp/entry/20150706/1436208007",target:"_blank",rel:"noopener noreferrer"}},[e._v("perf + Flame Graphs で Linux カーネル内のボトルネックを特定する - ablog"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"rtfm-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rtfm-method"}},[e._v("#")]),e._v(" RTFM Method")]),e._v(" "),a("p",[e._v("パフォーマンス ツールやメトリック等の道具そのものの理解を目的とした方法論。特にソースコードを読んで、実験してみる方法が効果的とのこと。")]),e._v(" "),a("ul",[a("li",[e._v("Linux の man ページ")]),e._v(" "),a("li",[e._v("書籍")]),e._v(" "),a("li",[e._v("ウェブ検索")]),e._v(" "),a("li",[e._v("同僚")]),e._v(" "),a("li",[e._v("技術トーク、スライド")]),e._v(" "),a("li",[e._v("サポート サービス")]),e._v(" "),a("li",[e._v("ソースコード")]),e._v(" "),a("li",[e._v("実験")])]),e._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=FJW8nGV4jxY",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux Performance Tools, Brendan Gregg, part 1 of 2 - YouTube"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=zrr2nUln9Kk",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux Performance Tools, Brendan Gregg, part 2 of 2 - YouTube"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.brendangregg.com/overview.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Brendan Gregg: Overview"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=o.exports}}]);