(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{207:function(e,n,t){"use strict";t.r(n);var a=t(1),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("hexo を使うための "),t("code",[e._v("nodejs, pandoc")]),e._v(" 入りの Ubuntu 環境を作りました。")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#dockerfile"}},[e._v("Dockerfile")])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[e._v("#")]),e._v(" Dockerfile")]),e._v(" "),t("p",[e._v("自分の馴染みの深い Ubuntu をベースに、hexo での作業環境を構築していきます。\n要件としては次のような環境を目指します。")]),e._v(" "),t("ul",[t("li",[e._v("Node.js ("),t("code",[e._v("npm")]),e._v(", "),t("code",[e._v("yarn")]),e._v(") が使える")]),e._v(" "),t("li",[t("code",[e._v("pandoc")]),e._v(" が使える")]),e._v(" "),t("li",[t("code",[e._v("hexo-cli")]),e._v(" が使える")])]),e._v(" "),t("p",[e._v("基本 npm 使えりゃ hexo なんて動くんですが、なんでわざわざ Dockerfile を用意するかというと "),t("code",[e._v("pandoc")]),e._v(" の存在です。hexo デフォルトの markdown レンダリング エンジンがあんまり気に入ってないので、"),t("code",[e._v("hexo-renderer-pandoc")]),e._v(" を使っています。なので "),t("code",[e._v("pandoc")]),e._v(" を用意する必要があり、環境毎に "),t("code",[e._v("pandoc")]),e._v(" を用意するのが面倒で Dockerfile にまとめてしまいました。")]),e._v(" "),t("p",[e._v("できたのがこれ。")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ARG BASE_CONTAINER=ubuntu:18.04\nFROM $BASE_CONTAINER\nLABEL maintainer="OpenJNY <openjny@gmail.com>"\n\nUSER root\n\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    git \n#    && apt-get clean \\\n#    && rm -rf /var/lib/apt/lists/*\n\n# Install pandoc\n# ref: https://github.com/jgm/pandoc/releases\nARG PANDOC_VERSION=2.9.1\nARG PANDOC_DEB=/tmp/pandoc.deb\nRUN wget -O ${PANDOC_DEB} "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-1-amd64.deb" && \\\n    dpkg -i ${PANDOC_DEB} && \\\n    rm ${PANDOC_DEB}\n\n# Install Node.js and yarn\n# ref: https://github.com/nodesource/distributions/blob/master/README.md#deb\nARG NODEJS_VERSION=12\nRUN curl -sL https://deb.nodesource.com/setup_${NODEJS_VERSION}.x | bash - && \\\n    apt-get install -y nodejs && \\\n    curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n    echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && \\\n    apt-get update && \\\n    apt-get install yarn\n\n# Install hexo-cli\nRUN npm install -g hexo-cli\n\nWORKDIR /blog\nEXPOSE 4000\n')])])]),t("p",[e._v("こんな感じで使ってください。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker build "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" --tag hexo-ubuntu\n$ docker run --rm -it -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(":/work -w /work -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4000")]),e._v(":4000 hexo-ubuntu /bin/bash\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);